>>> table = {(17, 242): 70, (124, 133): 62, (40, 173): 58, (206, 101): 62, (166, 74): 64, (160, 14): 66, (63, 27): 62, (103, 94): 70, (199, 80): 58, (80, 247): 64, (32, 31): 62, (109, 119): 68, (236, 225): 68, (140, 124): 72, (34, 132): 62, (252, 148): 66, (213, 190): 52, (48, 106): 70, (177, 252): 60, (29, 159): 68, (120, 90): 50, (123, 70): 62, (30, 131): 68, (145, 227): 64, (106, 180): 58, (77, 104): 64, (250, 208): 68, (83, 235): 54, (190, 141): 82, (153, 81): 64, (133, 73): 62, (215, 37): 68, (101, 197): 58, (207, 226): 64, (208, 230): 60, (99, 129): 72, (164, 209): 58, (174, 248): 54, (73, 183): 78, (238, 122): 68, (114, 115): 70, (146, 255): 72, (183, 184): 68, (10, 41): 64, (216, 84): 62, (189, 145): 66, (169, 59): 54, (57, 95): 64, (2, 155): 52, (200, 33): 68, (151, 167): 66, (86, 179): 56, (176, 123): 54, (218, 207): 64, (89, 194): 56, (60, 7): 70, (222, 16): 72, (76, 239): 54, (214, 162): 60, (82, 108): 72, (122, 193): 68, (108, 240): 68, (142, 231): 52, (175, 127): 56, (67, 158): 72, (3, 28): 64, (8, 178): 70, (246, 189): 60, (127, 153): 64, (46, 233): 70, (182, 63): 64, (231, 79): 56, (204, 254): 66, (158, 146): 56, (27, 219): 74, (23, 182): 68, (91, 89): 60, (221, 12): 68, (61, 128): 48, (54, 46): 68, (147, 120): 58, (185, 78): 58, (244, 38): 74, (13, 234): 64, (64, 130): 70, (95, 134): 60, (19, 105): 64, (35, 3): 68, (31, 4): 66, (194, 8): 58, (235, 34): 74, (37, 71): 70, (141, 251): 62, (237, 102): 62, (240, 249): 62, (210, 125): 68, (198, 215): 62, (223, 151): 54, (49, 237): 62, (203, 61): 56, (45, 245): 72, (193, 20): 60, (28, 24): 56, (68, 93): 52, (43, 177): 64, (220, 139): 68, (125, 2): 62, (179, 103): 62, (22, 49): 68, (181, 35): 60, (65, 5): 58, (1, 135): 58, (219, 72): 66, (79, 243): 62, (225, 11): 52, (211, 250): 64, (172, 99): 62, (36, 192): 58, (184, 201): 58, (178, 224): 62, (94, 1): 60, (112, 232): 58, (117, 176): 64, (242, 98): 58, (12, 109): 60, (241, 126): 50, (162, 149): 66, (18, 238): 64, (58, 67): 64, (135, 210): 58, (209, 97): 70, (44, 114): 54, (163, 18): 54, (92, 154): 64, (165, 86): 64, (72, 48): 64, (4, 223): 66, (253, 19): 76, (234, 165): 62, (93, 29): 58, (170, 39): 64, (115, 244): 54, (149, 60): 54, (156, 9): 68, (188, 22): 66, (249, 204): 60, (107, 51): 56, (87, 52): 62, (16, 117): 60, (248, 75): 58, (11, 174): 58, (59, 196): 56, (42, 54): 76, (201, 166): 68, (21, 45): 56, (14, 246): 56, (217, 211): 70, (131, 13): 50, (139, 191): 68, (105, 168): 64, (167, 205): 72, (26, 92): 60, (50, 241): 62, (41, 42): 56, (62, 156): 62, (90, 222): 60, (247, 58): 66, (38, 91): 64, (129, 150): 68, (233, 185): 66, (226, 23): 68, (33, 152): 62, (212, 57): 66, (119, 43): 60, (187, 213): 66, (55, 169): 62, (138, 56): 60, (25, 64): 70, (239, 253): 60, (161, 137): 64, (84, 40): 70, (157, 142): 66, (100, 66): 68, (81, 112): 60, (113, 111): 76, (15, 113): 66, (6, 68): 64, (136, 163): 66, (255, 136): 62, (230, 200): 62, (70, 198): 66, (132, 206): 58, (5, 88): 64, (137, 36): 64, (227, 144): 58, (229, 212): 60, (196, 76): 64, (69, 218): 68, (39, 220): 70, (154, 77): 64, (243, 229): 68, (96, 157): 72, (110, 107): 68, (116, 55): 58, (98, 6): 68, (24, 199): 54, (20, 170): 66, (52, 181): 66, (118, 172): 76, (192, 147): 58, (197, 203): 66, (88, 69): 66, (224, 140): 56, (128, 17): 56, (232, 62): 64, (56, 216): 58, (66, 25): 62, (205, 121): 58, (78, 116): 66, (180, 164): 62, (75, 44): 66, (152, 214): 66, (186, 82): 64, (7, 195): 68, (85, 175): 62, (254, 15): 66, (228, 83): 64, (71, 65): 52, (168, 188): 62, (9, 53): 62, (173, 228): 62, (143, 96): 64, (251, 87): 68, (134, 85): 64, (130, 138): 60, (171, 160): 62, (102, 217): 66, (51, 118): 64, (126, 30): 62, (47, 110): 66, (159, 21): 56, (53, 50): 62, (148, 187): 74, (111, 236): 66, (121, 221): 70, (74, 171): 62, (144, 100): 60, (97, 26): 58, (245, 161): 70, (150, 32): 60, (155, 202): 68, (191, 10): 64, (195, 143): 66, (202, 186): 66, (130, 213): 34, (104, 47): 68}
>>> max(table)
(255, 136)
>>> min(table)
(1, 135)
>>> table[(1,135)]
58
>>> len(table)
256
>>> table[(127,)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: (127,)
>>> table.find
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'find'
>>> table.key
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'key'
>>> table.index
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'index'
>>> 
>>> dir(table)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> table.iterkeys
<built-in method iterkeys of dict object at 0x7f8144954a28>
>>> table.iterkeys()
<dictionary-keyiterator object at 0x7f8144944838>
>>> table.viewkeys
<built-in method viewkeys of dict object at 0x7f8144954a28>
>>> table.viewkeys()
dict_keys([(17, 242), (124, 133), (40, 173), (206, 101), (92, 154), (166, 74), (63, 27), (103, 94), (199, 80), (123, 70), (32, 31), (168, 188), (236, 225), (140, 124), (34, 132), (61, 128), (147, 120), (48, 106), (177, 252), (29, 159), (120, 90), (200, 33), (145, 227), (106, 180), (77, 104), (250, 208), (53, 50), (83, 235), (190, 141), (133, 73), (215, 37), (101, 197), (207, 226), (189, 145), (99, 129), (164, 209), (174, 248), (73, 183), (238, 122), (114, 115), (146, 255), (183, 184), (10, 41), (216, 84), (208, 230), (169, 59), (71, 65), (57, 95), (75, 44), (15, 113), (205, 121), (64, 130), (86, 179), (176, 123), (89, 194), (60, 7), (222, 16), (76, 239), (214, 162), (82, 108), (122, 193), (142, 231), (175, 127), (67, 158), (85, 175), (3, 28), (8, 178), (246, 189), (127, 153), (46, 233), (182, 63), (35, 3), (218, 207), (72, 48), (27, 219), (130, 213), (23, 182), (91, 89), (25, 64), (80, 247), (54, 46), (213, 190), (185, 78), (244, 38), (13, 234), (151, 167), (95, 134), (19, 105), (231, 79), (31, 4), (194, 8), (235, 34), (37, 71), (141, 251), (237, 102), (157, 142), (210, 125), (198, 215), (223, 151), (49, 237), (203, 61), (45, 245), (193, 20), (153, 81), (68, 93), (109, 119), (220, 139), (187, 213), (179, 103), (22, 49), (181, 35), (65, 5), (1, 135), (219, 72), (79, 243), (225, 11), (149, 60), (172, 99), (36, 192), (184, 201), (178, 224), (94, 1), (112, 232), (51, 118), (242, 98), (30, 131), (156, 9), (162, 149), (18, 238), (58, 67), (135, 210), (209, 97), (44, 114), (163, 18), (249, 204), (108, 240), (165, 86), (158, 146), (47, 110), (234, 165), (93, 29), (170, 39), (160, 14), (211, 250), (241, 126), (188, 22), (12, 109), (107, 51), (87, 52), (125, 2), (248, 75), (11, 174), (16, 117), (28, 24), (201, 166), (21, 45), (14, 246), (217, 211), (131, 13), (139, 191), (105, 168), (167, 205), (74, 171), (26, 92), (50, 241), (41, 42), (62, 156), (43, 177), (247, 58), (38, 91), (152, 214), (233, 185), (251, 87), (33, 152), (42, 54), (212, 57), (119, 43), (144, 100), (55, 169), (138, 56), (221, 12), (196, 76), (161, 137), (84, 40), (240, 249), (100, 66), (81, 112), (113, 111), (204, 254), (6, 68), (136, 163), (255, 136), (230, 200), (70, 198), (132, 206), (5, 88), (226, 23), (39, 220), (229, 212), (239, 253), (69, 218), (227, 144), (154, 77), (96, 157), (110, 107), (116, 55), (98, 6), (24, 199), (20, 170), (52, 181), (118, 172), (192, 147), (197, 203), (88, 69), (224, 140), (128, 17), (232, 62), (252, 148), (137, 36), (66, 25), (78, 116), (180, 164), (2, 155), (186, 82), (7, 195), (56, 216), (254, 15), (228, 83), (59, 196), (9, 53), (173, 228), (143, 96), (134, 85), (130, 138), (171, 160), (102, 217), (117, 176), (126, 30), (4, 223), (159, 21), (115, 244), (148, 187), (111, 236), (121, 221), (129, 150), (253, 19), (97, 26), (245, 161), (243, 229), (155, 202), (90, 222), (104, 47), (195, 143), (202, 186), (150, 32), (191, 10)])
>>> bin(135)
'0b10000111'
>>> bin(135)[2
... ]
'1'
>>> bin(135)[2]
'1'
>>> bin(135)[3]
'0'
>>> bin(135)[2:]
'10000111'
>>> bin(135)[1:]
'b10000111'
>>> bin(135)[2:]
'10000111'
>>> def countocc(x):
...     x = bin(x)
...     x = x[2:]
...     for i in x:
...             if (i == '1'):
...                     res += 1
...     x = x[2:]
KeyboardInterrupt
>>> def countocc(x):
...     x = bin(x)[2:]
...     res = 0
...     for i in x:
...             if (i == '1'):
...                     res += 1
...     return res
... 
>>> table.viewkeys
<built-in method viewkeys of dict object at 0x7f8144954a28>
>>> table.viewkeys()
dict_keys([(17, 242), (124, 133), (40, 173), (206, 101), (92, 154), (166, 74), (63, 27), (103, 94), (199, 80), (123, 70), (32, 31), (168, 188), (236, 225), (140, 124), (34, 132), (61, 128), (147, 120), (48, 106), (177, 252), (29, 159), (120, 90), (200, 33), (145, 227), (106, 180), (77, 104), (250, 208), (53, 50), (83, 235), (190, 141), (133, 73), (215, 37), (101, 197), (207, 226), (189, 145), (99, 129), (164, 209), (174, 248), (73, 183), (238, 122), (114, 115), (146, 255), (183, 184), (10, 41), (216, 84), (208, 230), (169, 59), (71, 65), (57, 95), (75, 44), (15, 113), (205, 121), (64, 130), (86, 179), (176, 123), (89, 194), (60, 7), (222, 16), (76, 239), (214, 162), (82, 108), (122, 193), (142, 231), (175, 127), (67, 158), (85, 175), (3, 28), (8, 178), (246, 189), (127, 153), (46, 233), (182, 63), (35, 3), (218, 207), (72, 48), (27, 219), (130, 213), (23, 182), (91, 89), (25, 64), (80, 247), (54, 46), (213, 190), (185, 78), (244, 38), (13, 234), (151, 167), (95, 134), (19, 105), (231, 79), (31, 4), (194, 8), (235, 34), (37, 71), (141, 251), (237, 102), (157, 142), (210, 125), (198, 215), (223, 151), (49, 237), (203, 61), (45, 245), (193, 20), (153, 81), (68, 93), (109, 119), (220, 139), (187, 213), (179, 103), (22, 49), (181, 35), (65, 5), (1, 135), (219, 72), (79, 243), (225, 11), (149, 60), (172, 99), (36, 192), (184, 201), (178, 224), (94, 1), (112, 232), (51, 118), (242, 98), (30, 131), (156, 9), (162, 149), (18, 238), (58, 67), (135, 210), (209, 97), (44, 114), (163, 18), (249, 204), (108, 240), (165, 86), (158, 146), (47, 110), (234, 165), (93, 29), (170, 39), (160, 14), (211, 250), (241, 126), (188, 22), (12, 109), (107, 51), (87, 52), (125, 2), (248, 75), (11, 174), (16, 117), (28, 24), (201, 166), (21, 45), (14, 246), (217, 211), (131, 13), (139, 191), (105, 168), (167, 205), (74, 171), (26, 92), (50, 241), (41, 42), (62, 156), (43, 177), (247, 58), (38, 91), (152, 214), (233, 185), (251, 87), (33, 152), (42, 54), (212, 57), (119, 43), (144, 100), (55, 169), (138, 56), (221, 12), (196, 76), (161, 137), (84, 40), (240, 249), (100, 66), (81, 112), (113, 111), (204, 254), (6, 68), (136, 163), (255, 136), (230, 200), (70, 198), (132, 206), (5, 88), (226, 23), (39, 220), (229, 212), (239, 253), (69, 218), (227, 144), (154, 77), (96, 157), (110, 107), (116, 55), (98, 6), (24, 199), (20, 170), (52, 181), (118, 172), (192, 147), (197, 203), (88, 69), (224, 140), (128, 17), (232, 62), (252, 148), (137, 36), (66, 25), (78, 116), (180, 164), (2, 155), (186, 82), (7, 195), (56, 216), (254, 15), (228, 83), (59, 196), (9, 53), (173, 228), (143, 96), (134, 85), (130, 138), (171, 160), (102, 217), (117, 176), (126, 30), (4, 223), (159, 21), (115, 244), (148, 187), (111, 236), (121, 221), (129, 150), (253, 19), (97, 26), (245, 161), (243, 229), (155, 202), (90, 222), (104, 47), (195, 143), (202, 186), (150, 32), (191, 10)])
>>> for (i, j) in table.iterkeys():
...     
KeyboardInterrupt
>>> mini = 0
>>> minj = 0
>>> m = 0
>>> for i, j in table.viewkeys()
  File "<stdin>", line 1
    for i, j in table.viewkeys()
                               ^
SyntaxError: invalid syntax
>>> for i, j in table.viewkeys():
...     
KeyboardInterrupt
>>> m = 16
>>> for i, j in table.viewkeys():
...     if (countocc(i) + countocc(j) < m):
...             m = countocc(i) + countocc(j)
...             mini = i
...             minj = j
... 
>>> m
3
>>> min
<built-in function min>
>>> minii
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'minii' is not defined
>>> mini
64
>>> minj
130
>>> table[(64,130)]
70
>>> bin(130)
'0b10000010'
>>> for i,j in table.viewkeys():
...     
KeyboardInterrupt
>>> ,m = 16
  File "<stdin>", line 1
    ,m = 16
    ^
SyntaxError: invalid syntax
>>> m - 16
-13
>>> m=16
>>> for i, j in table.viewkeys():
...     if (countocc(i) + countocc(j) == 4):
...             print (i,j)
... 
(34, 132)
(72, 48)
(25, 64)
(194, 8)
(65, 5)
(36, 192)
(6, 68)
>>> bin(34)
'0b100010'
>>> bin(72)
'0b1001000'
>>> bin(25)
'0b11001'
>>> bin(194)
'0b11000010'
>>> bin(8)
'0b1000'
>>> bin(65)
'0b1000001'
>>> bin(36)
'0b100100'
>>> bin(6)
'0b110'
>>> bin(132)
'0b10000100'
>>> bin(48)
'0b110000'
>>> bin(65)
'0b1000001'
>>> bin(5)
'0b101'
>>> bin(36)
'0b100100'
>>> bin(192)
'0b11000000'
>>> bin(6)
'0b110'
>>> bin(68)
'0b1000100'
>>> def findocc(i):
...     for i,j in table.viewkeys():
...             if (countocc(i)+countocc(j) == 
  File "<stdin>", line 2
    for i,j in table.viewkeys():
                               ^
IndentationError: expected an indented block
>>> def findocc(x):
...     for i,j in table.viewkeys():
...             if (countocc(i) + countocc(j) == x):
...                     print (i,j)
...                     print "occ: ", (countocc(i),countocc(j))
... 
>>> findocc(3)
(64, 130)
occ:  (1, 2)
(128, 17)
occ:  (1, 2)
>>> findocc(4)
(34, 132)
occ:  (2, 2)
(72, 48)
occ:  (2, 2)
(25, 64)
occ:  (3, 1)
(194, 8)
occ:  (3, 1)
(65, 5)
occ:  (2, 2)
(36, 192)
occ:  (2, 2)
(6, 68)
occ:  (2, 2)
>>> ptable = [
...     0, 8, 16, 24, 32, 40, 48, 56, 
...     1, 9, 17, 25, 33, 41, 49, 57, 
...     2, 10, 18, 26, 34, 42, 50, 58, 
...     3, 11, 19, 27, 35, 43, 51, 59, 
...     4, 12, 20, 28, 36, 44, 52, 60, 
...     5, 13, 21, 29, 37, 45, 53, 61, 
...     6, 14, 22, 30, 38, 46, 54, 62, 
...     7, 15, 23, 31, 39, 47, 55, 63
... ]
>>> bin(64)
'0b1000000'
>>> bin(17)
'0b10001'
>>> table[(128,17)]
56
>>> ptable.find(3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'find'
>>> ptable.index(3)
24
>>> ptable.index(7)
56
>>> ptable.index(27)
27
>>> ptable.index(31)
59
>>> ptable.index(59)
31
>>> ptable.index(63)
63
>>> 0b1
1
>>> 0b10001
17
>>> ptable(17,242)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> ptable[(17,242)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list indices must be integers, not tuple
>>> table[(17,242)]
70
>>> bin(242)
'0b11110010'
>>> ptable.index(24)
3
>>> ptable.index(25)
11
>>> ptable.index(26)
19
>>> ptable.index(27)
27
>>> ptable.index(30)
51
>>> ptable.index(56)
7
>>> ptable.index(57)
15
>>> ptable.index(58)
23
>>> ptable.index(59)
31
>>> ptable.index(62)
55
>>> table[(128,17)]
56
>>> table[(17,242)]
70
>>> ptable.index(11)
25
>>> ptable.index(8)
1
>>> ptable.index(11)
25
>>> ptable.index(15)
57
>>> for i,j in table.viewkeys():
...     if(countocc(j) == 1):
...             print (i,j)
...             print "occ: ", (countocc(i), countocc(j))
... 
(61, 128)
occ:  (5, 1)
(222, 16)
occ:  (6, 1)
(25, 64)
occ:  (3, 1)
(31, 4)
occ:  (5, 1)
(194, 8)
occ:  (3, 1)
(94, 1)
occ:  (5, 1)
(125, 2)
occ:  (6, 1)
(150, 32)
occ:  (4, 1)
>>> for i in range(8):
...     print (ptable.index(8*i+3), ptable.index(8*i+7))
... 
(24, 56)
(25, 57)
(26, 58)
(27, 59)
(28, 60)
(29, 61)
(30, 62)
(31, 63)
>>> for i,j in table.viewkeys():
...     if(countocc(i) == 1):
...             print (i,j), "occ: ", (countocc(i),countocc(j))
... 
(32, 31) occ:  (1, 5)
(64, 130) occ:  (1, 2)
(8, 178) occ:  (1, 4)
(1, 135) occ:  (1, 4)
(16, 117) occ:  (1, 5)
(128, 17) occ:  (1, 2)
(2, 155) occ:  (1, 5)
(4, 223) occ:  (1, 7)
>>> for i,j in table.viewkeys():
...     if(countocc(j) == 1):
... for i,j in table.viewkeys():
  File "<stdin>", line 2
    if(countocc(j) == 1):
                        ^
IndentationError: expected an indented block
>>> for i,j in table.viewkeys():
...     if(countocc(j) == 2):
...             print (i,j), "occ: ", (countocc(i),countocc(j))
... 
(199, 80) occ:  (5, 2)
(34, 132) occ:  (2, 2)
(200, 33) occ:  (3, 2)
(99, 129) occ:  (4, 2)
(71, 65) occ:  (4, 2)
(64, 130) occ:  (1, 2)
(35, 3) occ:  (3, 2)
(72, 48) occ:  (2, 2)
(235, 34) occ:  (6, 2)
(193, 20) occ:  (3, 2)
(65, 5) occ:  (2, 2)
(219, 72) occ:  (6, 2)
(36, 192) occ:  (2, 2)
(156, 9) occ:  (4, 2)
(163, 18) occ:  (4, 2)
(28, 24) occ:  (3, 2)
(221, 12) occ:  (6, 2)
(84, 40) occ:  (3, 2)
(100, 66) occ:  (3, 2)
(6, 68) occ:  (2, 2)
(255, 136) occ:  (8, 2)
(227, 144) occ:  (5, 2)
(98, 6) occ:  (3, 2)
(128, 17) occ:  (1, 2)
(137, 36) occ:  (3, 2)
(143, 96) occ:  (5, 2)
(171, 160) occ:  (5, 2)
(191, 10) occ:  (7, 2)
>>> for i,j in table.viewkeys():
...     if(countocc(j) == 1):
...             print (i,j), "occ: ", (countocc(i),countocc(j)), "j:", bin(j)
... 
(61, 128) occ:  (5, 1) j: 0b10000000
(222, 16) occ:  (6, 1) j: 0b10000
(25, 64) occ:  (3, 1) j: 0b1000000
(31, 4) occ:  (5, 1) j: 0b100
(194, 8) occ:  (3, 1) j: 0b1000
(94, 1) occ:  (5, 1) j: 0b1
(125, 2) occ:  (6, 1) j: 0b10
(150, 32) occ:  (4, 1) j: 0b100000
>>> bin(61)
'0b111101'
>>> ptable.index(3)
24
>>> ptable.index(7)
56
>>> ptable.index(27)
27
>>> ptable.index(31)
59
>>> ptable.index(59)
31
>>> table[(61,128)]
48
>>> table[(128,17)]
56
>>> 3/4.0
0.75
>>> 3/4
0
>>> 3/(4 * 1.0)
0.75
>>> t = [[i for i in range(256)] for _ in range(256)]
>>> max(t)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]
>>> from zer0TCana import keybias, m, mk4, mk7
Testing pair # 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "zer0TCana.py", line 102, in <module>
    p = ord(plaintext[0])
TypeError: ord() expected a character, but string of length 8 found
>>> from zer0TCana import keybias, m, mk4, mk7
Testing pair # 0
Testing pair # 100
Testing pair # 200
Testing pair # 300









>>>> def countocc(x):
....     x = bin(x)[2:]
....     res = 0
....     for i in x:
....         if (i == '1'):
....             res += 1
....     return res
....     
>>>> for i,j in table.viewkeys():
....     if (countocc(j) == 1):
....         print (i,j), "occ: ", (countocc(i),countocc(j)), "bin:", (bin(i)[2:], bin(j)[2:])
....         
(222, 16) occ:  (6, 1) bin: ('11011110', '10000')
(61, 128) occ:  (5, 1) bin: ('111101', '10000000')
(31, 4) occ:  (5, 1) bin: ('11111', '100')
(194, 8) occ:  (3, 1) bin: ('11000010', '1000')
(125, 2) occ:  (6, 1) bin: ('1111101', '10')
(94, 1) occ:  (5, 1) bin: ('1011110', '1')
(25, 64) occ:  (3, 1) bin: ('11001', '1000000')
(150, 32) occ:  (4, 1) bin: ('10010110', '100000')
>>>> ptable
[16, 19, 23, 9, 22, 20, 21, 17, 40, 43, 44, 47, 41, 45, 57, 42, 36, 32, 38, 33, 55, 37, 34, 35, 50, 53, 48, 52, 39, 54, 49, 51, 10, 11, 14, 8, 13, 15, 18, 12, 0, 7, 2, 3, 4, 1, 5, 31, 63, 46, 58, 62, 61, 59, 56, 60, 6, 29, 25, 24, 30, 27, 28, 26]
>>>> ptable = [
....     0, 8, 16, 24, 32, 40, 48, 56, 
....         1, 9, 17, 25, 33, 41, 49, 57, 
....             2, 10, 18, 26, 34, 42, 50, 58, 
....                 3, 11, 19, 27, 35, 43, 51, 59, 
....                     4, 12, 20, 28, 36, 44, 52, 60, 
....                         5, 13, 21, 29, 37, 45, 53, 61, 
....                             6, 14, 22, 30, 38, 46, 54, 62, 
....                                 7, 15, 23, 31, 39, 47, 55, 63
....                                 ]
>>>> ptable
[0, 8, 16, 24, 32, 40, 48, 56, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10, 18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20, 28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30, 38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63]
>>>> ptable.index(9)
9
>>>> ptable.index(8)
1
>>>> ptable.index(14)
49
>>>> ptable.index(0)
0
>>>> ptable.index(6)
48
>>>> ptable.index(54)
54
>>>> table[(25,64)]
70
>>>> table[(64,130)]
70
>>>> table[(64,120)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: (64, 120)
>>>> 


>>>> m = 1
>>>> ii = jj = 0
>>>> for i in range(256):
....     for j in range(256):
....         if (i!=130 and j!=194) and (keybias[i][j] < m):
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             
>>>> print m, (ii,jj)
0.0316758453516 (253, 115)
>>>> for i in range(256):
....     for j in range(256):
....         if (i!=130 and j!=194)  and (keybias[i][j] < m):
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             

KeyboardInterrupt
>>>> m = 1
>>>> print m, (ii,jj)
1 (253, 115)
>>>> for i in range(256):
....     for j in range(256):
....         if (i!=130 and j!=194) and (i!=253,115) and (keybias[i][j] < m):
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             
>>>> print m, (ii,jj)
0.0316758453516 (253, 115)
>>>> m = 1
>>>> for i in range(256):
....     for j in range(256):
....         if (i!=130 and j!=194) and (i!=253 and j!=115) and (keybias[i][j] < m):
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             
>>>> m = 1
>>>> for i in range(256):
....     for j in range(256):
....         if (i!=130 and j!=194) and (i!=253 and j!=115) and (keybias[i][j] < m):
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             
>>>> print m, (ii,jj)
0.0323014557031 (229, 238)
>>>> 


>>>> m = 1
>>>> ii = jj = 0
>>>> for i in range(256):
....     for j in range(256):
....         if (i != 167 and j != 150) and keybias[i][j]<m:
....             m = keybias[i][j]
....             ii = i
....             jj = j
....             
>>>> print m, (ii,jj)
0.00338217535156 (42, 108)

